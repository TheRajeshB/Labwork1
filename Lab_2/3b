from math import *
import numpy as np
from scipy.integrate import quad
from scipy.special import kn
import matplotlib.pyplot as plt



def V(u):
    V_output=np.array([]) #list to store output of function
    for z in np.linspace(-5,5,100):#range of values for z
        for r in np.linspace(0.25,5,100):#range of values for r
                 Q= 10**-13
                 m = tan(u)
                 n = cos(u)
                 epsilon = 8.854e-12 #epsilon-nought in calculation of electrostatic constant
                 l = 1 #l in mm
                 k = Q/(4*pi*epsilon)
                 c = ((z-l*m)**2 + r**2)**0.5 #terms under root in denominator
                      
                 output = (k*e**-(m**2))/((n**2)*c)
                 V_output = np.append(list,output)#adding results to list
                 
                 
    return V_output       
    

    
    


#fix to simpsons
 
def simp(f,a,b,N):
    

     h= (b-a)/N
    
     sum_odd = 0.0
     sum_even = 0.0
     initial_sum = np.add(f(a) ,f(b))
    
     trap_area=[]
    
    #calculating last slice in trapezoidal if N is odd 
     if N % 2 == 1: #if N is odd calc the last slice with trapezoidal rule
         trap_area= np.append(trap_area,h*f(a+(N-1)*h))
         N -= 1
         b= b-h
         #loop to find sum of odd terms for Simpson integration
     for k in range(1,int(N),2):
        sum_odd  += f((a+k*h))
     
    #loop to find sum of even terms for Simpson integration
     for k in range(2,int(N),2):
        sum_even += f((a+k*h))
     
     return(h*(initial_sum + 4*sum_odd + 2*sum_even)/3) + (trap_area)
     
     


print(simp(V,-pi/2,pi/2,9))

